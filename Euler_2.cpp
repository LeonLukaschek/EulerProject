/*
 * @Author: Leon Lukaschek, 21.1.16
 *
 *
 * PROBLEM:
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/



#include <iostream>

int main()
{
	
	
	//Values for the current and two last numbers
	int x = 0; // second last
	int y = 1; // last
	int z = 1; // current sum
	
	//Sum to get the even-valued terms
	int sum;
	
	//Endless loop
	for(; ;)
	{
		//Prints the second last number
		std::cout << x << std::endl;
		
		//test if the number is even
		if((z % 2) == 0)
		{
			//if it is, adds it to the sum
			sum += z;
		}
		
		x = y; //X is the second last number, it moves up one slot each "round"
		y = z; //Y is the last number, it moves up and is the last number;
		z = x + y; //Z is the sum off the both last numbers
		
		
		//If Z is bigger than 4 Million, break out of the loop
		if(z > 4000000){
			std::cout << "Maximum reached!" << std::endl;
			break;
		}
	}
	
	//Printing the last num
	std::cout << "The total sum is: " << sum << std::endl;
	
	
	return 0;
}


